proteins_sig_across_all<-subset(Full_results, Full_results$Comparison=="Control_v_Mild" & Full_results$adj.P.Val<=0.05 |
Full_results$Comparison=="Mild_v_Critical" & Full_results$adj.P.Val<=0.05 |
Full_results$Comparison=="Severe_v_Critical" & Full_results$adj.P.Val<=0.05)
# keep only those that are repeated 3 times
proteins_sig_across_all<-subset(proteins_sig_across_all, proteins_sig_across_all$OLINK.ID %in% subset(as.data.frame(table(proteins_sig_across_all$OLINK.ID)), Freq==3)$Var1)
# sort by OLINK
proteins_sig_across_all<-proteins_sig_across_all[order(proteins_sig_across_all$OLINK.ID),]
# check
head(proteins_sig_across_all)
nrow(proteins_sig_across_all)
# empty list to remove
proteins_sig_across_all_to_remove<-vector()
# keep proteins where logFC is same direction in all analysis
for (x in seq(1, nrow(proteins_sig_across_all),3)) {
# extract fold change by 3
numbers<-proteins_sig_across_all$logFC[x:(x+2)]
if(all(numbers>0)==F & all(numbers<0)==F) {
proteins_sig_across_all_to_remove<-c(proteins_sig_across_all_to_remove, proteins_sig_across_all$OLINK.ID[x])
}
}
# 1. working directory - unhash this if working remotely
working_dir<-"D:/Dropbox/Projects/Genotype/QC_pipleline/small_data_test_output"
library(DT)
snp_count_post_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_post_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_post_impute)<-c("Chromosome", "Post-imputation")
# read table of samples removed
snp_count_pre_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_pre_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_pre_impute)<-c("Chromosome", "Pre-imputation")
#merge
snp_count<-merge(snp_count_pre_impute, snp_count_post_impute, all.x=T)
# change chromosome 23, 24, 25, 26
snp_count[snp_count$Chromosome==23,3]<-snp_count[snp_count$Chromosome==23,2]
snp_count[snp_count$Chromosome==24,3]<-snp_count[snp_count$Chromosome==24,2]
snp_count[snp_count$Chromosome==25,3]<-snp_count[snp_count$Chromosome==25,2]
snp_count[snp_count$Chromosome==26,3]<-snp_count[snp_count$Chromosome==26,2]
datatable(snp_count, options = list(pageLength = 26), rownames = F)
# add total column
snp_count[1,27]<-"Total"
# add total column
snp_count[1,]<-c("Total", colSums(snp_count[2], colSums(snp_count[3])
# add total column
snp_count[1,]<-c("Total", colSums(snp_count[2]), colSums(snp_count[3]))
snp_count
# read table of samples removed
snp_count_post_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_post_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_post_impute)<-c("Chromosome", "Post-imputation")
# read table of samples removed
snp_count_pre_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_pre_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_pre_impute)<-c("Chromosome", "Pre-imputation")
#merge
snp_count<-merge(snp_count_pre_impute, snp_count_post_impute, all.x=T)
# change chromosome 23, 24, 25, 26
snp_count[snp_count$Chromosome==23,3]<-snp_count[snp_count$Chromosome==23,2]
snp_count[snp_count$Chromosome==24,3]<-snp_count[snp_count$Chromosome==24,2]
snp_count[snp_count$Chromosome==25,3]<-snp_count[snp_count$Chromosome==25,2]
snp_count[snp_count$Chromosome==26,3]<-snp_count[snp_count$Chromosome==26,2]
# add total column
snp_count[27,]<-c("Total", colSums(snp_count[2]), colSums(snp_count[3]))
snp_count
barplot(snp_count)
snp_count
ggplot(data=snp_count, aes(x=Chromosome, y=Pre-imputation))
library(ggplot2)
library(reshape)
library(Reshape)
library(reshape)
install.packages("reshape")
library(reshape)
snp_count_reformated<-melt(snp_count, id=chromosome)
snp_count_reformated<-melt(snp_count, id="chromosome")
snp_count
snp_count_reformated<-melt(snp_count, id="Chromosome")
snp_count
snp_count_reformated
# read table of samples removed
snp_count_post_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_post_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_post_impute)<-c("Chromosome", "Post-imputation")
# read table of samples removed
snp_count_pre_impute<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/3.summary_report_files/snp_count_pre_impute.txt", sep="/"), head=F)
# add colnames
colnames(snp_count_pre_impute)<-c("Chromosome", "Pre-imputation")
#merge
snp_count<-merge(snp_count_pre_impute, snp_count_post_impute, all.x=T)
# change chromosome 23, 24, 25, 26
snp_count[snp_count$Chromosome==23,3]<-snp_count[snp_count$Chromosome==23,2]
snp_count[snp_count$Chromosome==24,3]<-snp_count[snp_count$Chromosome==24,2]
snp_count[snp_count$Chromosome==25,3]<-snp_count[snp_count$Chromosome==25,2]
snp_count[snp_count$Chromosome==26,3]<-snp_count[snp_count$Chromosome==26,2]
snp_count_reformated<-melt(snp_count, id="Chromosome")
snp_count_reformated
colnames(snp_count_reformated)[3]<-"count"
#rename pre/post imputation
snp_count_reformated[snp_count_reformated$variable=="Pre-imputation"]
#rename pre/post imputation
snp_count_reformated[snp_count_reformated$variable=="Pre-imputation",2]
# rename columns
colnames(snp_count_reformated)[2]<-"Imputation"
colnames(snp_count_reformated)[3]<-"Count"
ggplot(data=snp_count, aes(x=Chromosome, y=Pre-imputation, fill=) +
geom_bar(stat="identity", position=position_dodge()))
ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Pre-imputation, fill=) +
geom_bar(stat="identity", position=position_dodge()))
ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Pre-imputation, fill="Imputation") +
geom_bar(stat="identity", position=position_dodge()))
ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Pre-imputation, fill="Imputation")) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Count, fill=Imputation)) +
geom_bar(stat="identity", position=position_dodge())
ggplotly(ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Count, fill=Imputation)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(plot.title = element_text(hjust = 0.5, size=20)))
library(plotly)
ggplotly(ggplot(data=snp_count_reformated, aes(x=Chromosome, y=Count, fill=Imputation)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(plot.title = element_text(hjust = 0.5, size=20)))
GW_info<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/INFO-1.GW.txt", sep="/"), head=F)
GW_info
##########################################################################################################################################
####                                                                                                                                  ####
###                                                                                                                                    ###
##                                                                                                                                      ##
#                                                   Generate Summary Report                                                              #
##                                                                                                                                      ##
###                                                                                                                                    ###
####                                                                                                                                  ####
##########################################################################################################################################
## AUTHOR: HAMEL PATEL
## EMAIL: Hamel.patel@kcl.ac.uk
## DATE: 16/09/20200
##### DESCRIPTION ####
## creates imputation summary reoprt
## - requires imputation working directory only
##
# requires pandoc to be installed on local machine
#
#
##### ARGUMENTS
# 1. working directory - unhash this if working remotely
working_dir<-"D:/Dropbox/Projects/Genotype/QC_pipleline/small_data_test_output"
# set external arguments
#args <- commandArgs(TRUE)
#working_dir<-args[1]
#libraries
library(DT)
library(ggplot2)
library(reshape)
library(plotly)
#add colnames
colnames(GW_info)<-c("INFO score", "Count", "%")
datatable(GW_info, options = list(pageLength = 12), rownames = F)
barplot(GW_info)
head
head(GW_info)
ggplotly(ggplot(data=GW_info, aes(x='INFO score', y=Count)) +
geom_bar(stat="identity") +
coord_flip())
ggplotly(ggplot(data=GW_info, aes(x='INFO score', y=Count)) +
geom_bar(stat="identity"))
ggplotly(ggplot(data=GW_info, aes(x=INFO score, y=Count)) +
geom_bar(stat="identity"))
ggplotly(ggplot(data=GW_info, aes(x=INFO score, y=Count)) +
ggplotly(ggplot(data=GW_info, aes(x=INFO score, y=Count)) +
geom_bar())
ggplotly(
ggplot(data=GW_info, aes(x=INFO score, y=Count)) +
geom_bar()
)
ggplotly(
ggplot(data=GW_info, aes(x=GW_info$`INFO score`, y=Count)) +
geom_bar()
)
ggplotly(
ggplot(data=GW_info, aes(x=`INFO score`, y=Count)) +
geom_bar(stat="identity")
)
ggplotly(ggplot(data=GW_info, aes(x=`INFO score`, y=Count)) +
geom_bar(stat="identity") +
coord_flip())
GW_info[GW_info$`INFO score`!==Total]
GW_info[GW_info$`INFO score`!=="Total"]
GW_info
GW_info[GW_info$`INFO score`!=="Total",]
subset(GW_info, GW_info$`INFO score`!=="Total")
subset(GW_info, GW_info$`INFO score`!="Total")
GW_info[GW_info$`INFO score`!="Total",]
ggplotly(ggplot(data=GW_info[GW_info$`INFO score`!="Total",], aes(x=`INFO score`, y=Count)) +
geom_bar(stat="identity") +
coord_flip())
ggplotly(ggplot(data=GW_info[GW_info$`INFO score`!="Total",], aes(x=`INFO score`, y=Count)) +
geom_bar(stat="identity", fill="red") +
coord_flip())
ggplotly(ggplot(data=GW_info[GW_info$`INFO score`!="Total",], aes(x=`INFO score`, y=Count)) +
geom_bar(stat="identity", fill="darkred") +
coord_flip())
##########################################################################################################################################
####                                                                                                                                  ####
###                                                                                                                                    ###
##                                                                                                                                      ##
#                                                   Generate Summary Report                                                              #
##                                                                                                                                      ##
###                                                                                                                                    ###
####                                                                                                                                  ####
##########################################################################################################################################
## AUTHOR: HAMEL PATEL
## EMAIL: Hamel.patel@kcl.ac.uk
## DATE: 16/09/20200
##### DESCRIPTION ####
## creates imputation summary reoprt
## - requires imputation working directory only
##
# requires pandoc to be installed on local machine
#
#
##### ARGUMENTS
# 1. working directory - unhash this if working remotely
working_dir<-"D:/Dropbox/Projects/Genotype/QC_pipleline/small_data_test_output"
bin<-"D:/Dropbox/Projects/Genotype/QC_pipleline/bin/"
# set external arguments
#args <- commandArgs(TRUE)
#working_dir<-args[1]
#bin<-args[2]
#libraries
library(DT)
library(ggplot2)
library(reshape)
library(plotly)
ggplotly(ggplot(data=GW_info[GW_info$`INFO score`!="Total",], aes(x=`R-square`, y=Count)) +
geom_bar(stat="identity", fill="darkred") +
coord_flip())
#read table
GW_info<-read.table(paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/INFO-1.GW.txt", sep="/"), head=F)
#add colnames
colnames(GW_info)<-c("R-square", "Count", "%")
ggplotly(ggplot(data=GW_info[GW_info$R-square!="Total",], aes(x=R-square, y=Count)) +
geom_bar(stat="identity", fill="darkred") +
coord_flip())
GW_info
ggplotly(ggplot(data=GW_info[GW_info$`R-square`!="Total",], aes(x=`R-square`, y=Count)) +
geom_bar(stat="identity", fill="darkred") +
coord_flip())
print("## Chromosome [x]
**Alternate Allele Frequency in data vs Reference Genome:**
![](`r paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/AF-1.IC_input.chr[x].png", sep="/")`)
**Distribution of Imputation Score:**
![](`r paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/Manhattan.Info-1.IC_input.chr[x].png", sep="/")`)
")
for(x in 1:5){
print("## Chromosome [x]
**Alternate Allele Frequency in data vs Reference Genome:**
![](`r paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/AF-1.IC_input.chr[x].png", sep="/")`)
**Distribution of Imputation Score:**
![](`r paste(working_dir, "10.Imputation/5.post_imputation_checks/2.IC_output/IC_output_files/Manhattan.Info-1.IC_input.chr[x].png", sep="/")`)
")
}
getwd()
shinyApp("D:/Dropbox/Projects/Genotype/Power calculations/ui.R", "D:/Dropbox/Projects/Genotype/Power calculations/server.R)
shinyApp("D:/Dropbox/Projects/Genotype/Power calculations/ui.R", "D:/Dropbox/Projects/Genotype/Power calculations/server.R")
library(shiny)
runApp('D:/Dropbox/Projects/Genotype/Power calculations/test.R')
install.packages("remotes")
remotes::install_github("DudbridgeLab/AVENGEME")
remotes::install_github("DudbridgeLab/AVENGEME")
devtools::install_github("DudbridgeLab/avengeme")
avengeme::avengemeShiny()
server <- function(input, output) {
results = eventReactive(input$go, {
p=as.numeric(strsplit(input$p,",")[[1]])
pupper=as.numeric(strsplit(input$pupper,",")[[1]])
vg1=input$vg1
if (input$estimateVariance) vg1=NA
vg2=input$vg2
if (input$bidirectional & input$estimateVg2) vg2=NA
cov12=input$cov12
if (input$estimateCovariance) cov12=NA
pi0=input$pi0
if (input$estimatePi0) pi0=NA
pi02=input$pi02
if (input$bidirectional & input$estimatePi02) pi02=NA
if (input$fix) {
vg2=vg1
cov12=vg1
pi02=pi0
}
if (!is.na(vg1) & !is.na(cov12) & !is.na(pi0) & (!input$bidirectional | !is.na(vg2) & !is.na(pi02))) {
result=polygenescore(nsnp=input$nsnp,n=c(input$n1,input$n2),vg=vg1,cov12=cov12,pi0=pi0,pupper=pupper,nested=input$nested,weighted=input$weighted,binary=c(input$binary1,input$binary2),prevalence=c(input$prevalence1,input$prevalence2),sampling=c(input$sampling1,input$sampling2))
outputString="<HR><H4>No parameters estimated</H4>"
if (result$error=="") {
outputString=paste(outputString,"R2 between score and target trait = ",toString(format(result$R2,digits=3)))
outputString=paste(outputString,"<BR>Non-centrality parameter of chisq test = ",toString(format(result$NCP,digits=3)))
outputString=paste(outputString,"<BR>Expected p-value of chisq test = ",toString(format(result$p,digits=3)))
outputString=paste(outputString,"<BR>Power of chisq test = ",toString(format(result$power,digits=3)))
if (input$binary2) {
outputString=paste(outputString,"<BR>Area under ROC curve = ",toString(format(result$AUC,digits=3)))
}
else {
outputString=paste(outputString,"<BR>Mean square error = ",toString(format(result$MSE,digits=3)))
}
}
else {
outputString=paste(outputString,"<font color=#ff0000>",result$error,"</font>")
}
outputString
}
else {
result=estimatePolygenicModel(p=p,nsnp=input$nsnp,n=c(input$n1,input$n2),vg=c(vg1,vg2),cov12=cov12,pi0=c(pi0,pi02),pupper=pupper,nested=input$nested,weighted=input$weighted,binary=c(input$binary1,input$binary2),prevalence=c(input$prevalence1,input$prevalence2),sampling=c(input$sampling1,input$sampling2),bidirectional=input$bidirectional,fixvg2pi02=input$fix)
outputString="<HR>"
if (result$error=="") {
outputString=paste(outputString,"<H4>Estimated polygenic model</H4>")
if (input$bidirectional) {
if (is.na(vg1)) outputString=paste(outputString,"Variance in training sample = ",format(result$vg[1,1],digits=3),"(",format(result$vg[1,2],digits=3),",",format(result$vg[1,3],digits=3),")")
if (!input$fix & is.na(vg2)) outputString=paste(outputString,"<BR>Variance in target sample = ",format(result$vg[2,1],digits=3),"(",format(result$vg[2,2],digits=3),",",format(result$vg[2,3],digits=3),")")
if (!input$fix & is.na(cov12)) outputString=paste(outputString,"<BR>Covariance between training and target samples = ",format(result$cov12[1],digits=3),"(",format(result$cov12[2],digits=3),",",format(result$cov12[3],digits=3),")")
if (is.na(pi0)) outputString=paste(outputString,"<BR>Proportion of null SNPs in training sample = ",format(result$pi0[1,1],digits=3),"(",format(result$pi0[1,2],digits=3),",",format(result$pi0[1,3],digits=3),")")
if (!input$fix & is.na(pi02)) outputString=paste(outputString,"<BR>Proportion of null SNPs in target sample = ",format(result$pi0[2,1],digits=3),"(",format(result$pi0[2,2],digits=3),",",format(result$pi0[2,3],digits=3),")")
}
else {
if (is.na(vg1)) outputString=paste(outputString,"Variance in training sample = ",format(result$vg[1],digits=3),"(",format(result$vg[2],digits=3),",",format(result$vg[3],digits=3),")")
if (!input$fix & is.na(cov12)) outputString=paste(outputString,"<BR>Covariance between training and target samples = ",format(result$cov12[1],digits=3),"(",format(result$cov12[2],digits=3),",",format(result$cov12[3],digits=3),")")
if (is.na(pi0)) outputString=paste(outputString,"<BR>Proportion of null SNPs in training sample = ",format(result$pi0[1],digits=3),"(",format(result$pi0[2],digits=3),",",format(result$pi0[3],digits=3),")")
}
outputString=paste(outputString,"<BR>Log-likelihood = ",format(result$logLikelihood,digits=3))
}
else {
outputString=paste(outputString,"<font color=#ff0000>",result$error,"</font>")
}
outputString=paste(outputString,"<HR>")
outputString
}
})
output$polygenescore=renderText({results()})
}
runApp('D:/Dropbox/Projects/Genotype/Power calculations/temp')
shiny::runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
library(shiny)
library(shinydashboard)
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
library(shinythemes)
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
library(crunchy)
install.packages(crunchy)
install.packages("crunchy")
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
runApp('D:/Dropbox/Projects/Genotype/QC_pipleline/Rshiny/coping')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(plotly)
library(DT)
library(tidyr)
library(limma)
library(EnhancedVolcano)
library(Hmisc)
library(Rmisc)
# read - pc
protein_data<-read.csv("D:/Dropbox/Projects/COVID19_blood_biomarker/Data/protein_expression_data.txt", sep="\t", head=T, fill=T)
assay_data<-read.csv("D:/Dropbox/Projects/COVID19_blood_biomarker/Data/protein_info.txt", sep="\t", head=T)
# dim
dim(protein_data)
# pc
output_dir<-"D:/Dropbox/Projects/COVID19_blood_biomarker/Analysis"
load(file=paste(output_dir, "analysis.RData", sep="/"))
# This is the count of 50% across groups.
table(missingness_across_groups)
proteins_to_remove
install.packages('installr')
install.pandoc()
rmarkdown::find_pandoc()
ls()
rm()
ls()
rm(list(ls()))
rm(list=(ls()))
ll
rmarkdown::find_pandoc()
library(rmarkdown)
find_pandoc()
pandoc_version()
pandoc -v
library(rmarkdown)
pandoc_version()
pandco_convert()
pandoc_convert()
install.packages(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
pandoc_version()
Sys.getenv()
Sys.getenv("RSTUDIO_PANDOC")
pandoc_exec()
rmarkdown::find_pandoc()
rmarkdown::pandoc_version()
install.packages("bookdown")
install.packages(c("backports", "BH", "bibtex", "bit", "bit64", "brglm", "broom", "calibrate", "callr", "car", "carData", "caTools", "Ckmeans.1d.dp", "cli", "clipr", "coin", "colorspace", "covr", "crosstalk", "data.table", "DBI", "dbplyr", "devtools", "DiagrammeR", "digest", "dplyr", "DT", "e1071", "earth", "ellipse", "ellipsis", "emmeans", "fansi", "fastmap", "float", "forcats", "foreach", "Formula", "fs", "gam", "generics", "ggplot2", "ggrepel", "gh", "git2r", "glue", "gower", "gplots", "haven", "hexbin", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "isoband", "iterators", "jsonlite", "knitr", "labeling", "labelled", "later", "lava", "libcoin", "lme4", "lmerTest", "lmtest", "lubridate", "magrittr", "maptools", "matrixStats", "mda", "memoise", "mlbench", "modelr", "multcomp", "nloptr", "openssl", "openxlsx", "party", "pbkrtest", "pillar", "pkgbuild", "pkgload", "plotly", "plotmo", "plotrix", "pls", "pROC", "processx", "profileModel", "promises", "proxy", "ps", "quantreg", "questionr", "R6", "Rcpp", "RcppEigen", "RCurl", "Rdpack", "readr", "recipes", "rematch2", "reprex", "reshape2", "rex", "rlang", "rmdformats", "ROCR", "roxygen2", "rprojroot", "RSQLite", "rstatix", "rstudioapi", "rversions", "rvest", "sandwich", "scales", "shiny", "sp", "SQUAREM", "statmod", "stringi", "superpc", "survival", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "usethis", "vcd", "vctrs", "withr", "xgboost", "xml2", "xmlparsedata", "zip", "zoo"))
library(rmarkdown)
Sys.getenv()
?lmfit
library(limma)
?lmfit
?lmFit
pandoc_version()
library(rmarkdown)
install.packages(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
pandoc_version()
pandoc_available()
rmarkdown::find_pandoc()
pandoc_exec()
Sys.getenv("RSTUDIO_PANDOC")
Sys.getenv()
grep("PANDOC", Sys.getenv())
Sys.getenv()
grep("PANDOC", Sys.getenv())
rmarkdown::find_pandoc()
rmarkdown
library(rmarkdown)
Sys.getenv()
R.version()
r.Version()
r.version()
version
Sys.getenv()
rmarkdown::pandoc_available()
pandoc -v
Sys.getenv("RSTUDIO_PANDOC")
dir <- utils::shortFileName(path.expand("~/rstudio-pandoc"))
library(utils)
shortFileName
Sys.getenv("RSTUDIO_PANDOC")
MY_RSTUDIO_PANDOC="D:/R"
Sys.setenv("RSTUDIO_PANDOC" = Sys.getenv("MY_RSTUDIO_PANDOC"))
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv("RSTUDIO_PANDOC" = "MY_RSTUDIO_PANDOC")
Sys.getenv("RSTUDIO_PANDOC")
Sys.setenv("RSTUDIO_PANDOC" = MY_RSTUDIO_PANDOC)
Sys.getenv("RSTUDIO_PANDOC")
Sys.getenv("RSTUDIO_PANDOC")
sink(file = "~/RStudioEnv.txt")
Sys.getenv()
sink()
Sys.getenv()
Sys.getenv()
install.packages('installr')
install.pandoc()
libarary(installr)
libarary("installr")
# installing/loading the package:
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
# Installing pandoc
install.pandoc()
ll
pwd
pwd()
getwd()
setwd("D:\Dropbox/Projects/Genotype/QC_pipleline/COPING website/")
setwd("D:/Dropbox/Projects/Genotype/QC_pipleline/COPING website/")
rmarkdown::render_site()
rmarkdown::render_site()
ll
pwd
setwd("test/")
rmarkdown::render_site()
rmarkdown::find_pandoc()
rmarkdown::find_pandoc(dir="D:/Dropbox/rstudio/rstudio-pandoc/")
rmarkdown::find_pandoc(cache = FALSE)
```{r, setup, include=FALSE}
rmarkdown::find_pandoc(dir="D:/Dropbox/rstudio/rstudio-pandoc/")
```
```{r, setup, include=FALSE}
More about this website.
Sys.getenv("RSTUDIO_PANDOC")
pandoc -v
dir <- utils::shortFileName(path.expand("~/rstudio-pandoc"))
library(utils)
?shortFileName
dir <- utils::shortPathName(path.expand("~/rstudio-pandoc"))
dir
entry <- paste("RSTUDIO_PANDOC", shQuote(dir), sep = " = ")
contents <- if (file.exists("~/.Renviron")) readLines("~/.Renviron")
filtered <- grep("^RSTUDIO_PANDOC", contents, value = TRUE, invert = TRUE)
amended <- union(filtered, entry)
writeLines(amended, "~/.Renviron")
More about this website.
Sys.getenv("RSTUDIO_PANDOC")
pandoc -v
Sys.getenv
Sys.getenv(0)
Sys.getenv()
"D:/Dropbox/rstudio/rstudio-pandoc/"
Sys.getenv("RSTUDIO_PANDOC")
Sys.getenv("RSTUDIO_PANDOC")<-""
Sys.getenv(RSTUDIO_PANDOC = "")
Sys.getenv(RSTUDIO_PANDOC = "test")
Sys.getenv('R_USER')
Sys.getenv("RSTUDIO_PANDOC")
Sys.getenv("RSTUDIO_PANDOC")
